components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "66c4b893c5fc601d015fa00a"
        name:
          type: string
          example: "Juan Manuel"
        lastName:
          type: string
          example: "Cámara"
        dni:
          type: integer
          example: 33162314
        blockAndLot:
          type: string
          example: "3401"
        phone:
          type: integer
          example: 3515921209
        email:
          type: string
          example: "juanconizza@gmail.com"
        password:
          type: string
          example: "$2b$10$O8jnI7F74Dm.XLlDdLaDl.HaVgzkcRp0FgTK8yvy0nLdn/I2M9sk6"
        role:
          type: integer
          example: 1
        verify:
          type: boolean
          example: true
        verifyCode:
          type: string
          example: "158535"
        createdAt:
          type: string
          format: date-time
          example: "2024-08-20T15:38:59.260Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-08-20T15:39:25.001Z"
        __v:
          type: integer
          example: 0
      required:
        - name
        - lastName
        - dni
        - blockAndLot
        - phone
        - email
        - password
        - verifyCode

paths:
  /api/users:
    get:
      tags:
        - Users
      summary: Obtener todos los usuarios
      description: Obtiene una lista de todos los usuarios. Puede filtrar por rol usando el parámetro de consulta `role`.
      parameters:
        - name: role
          in: query
          description: Filtro opcional para el rol del usuario. 0 = User, 1 = Admin
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  response:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                example:
                  statusCode: 200
                  response:
                    - _id: "66c4b893c5fc601d015fa00a"
                      name: "Juan Manuel"
                      lastName: "Cámara"
                      dni: 33162314
                      blockAndLot: "3401"
                      phone: 3515921209
                      email: "juanconizza@gmail.com"
                      password: "$2b$10$O8jnI7F74Dm.XLlDdLaDl.HaVgzkcRp0FgTK8yvy0nLdn/I2M9sk6"
                      role: 1
                      verify: true
                      verifyCode: "158535"
                      createdAt: "2024-08-20T15:38:59.260Z"
                      updatedAt: "2024-08-20T15:39:25.001Z"
                      __v: 0
        '401':
          description: Error de autenticación
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Bad auth from policies!"
        '403':
          description: Error de permisos insuficientes
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: "Forbidden. Insufficient permissions"
        '404':
          description: No hay usuarios para mostrar
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  response:
                    type: null
                  message:
                    type: string
                    example: "No users to display"
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Internal Server Error"

    post:
      tags:
        - Users
      summary: Crear un nuevo usuario (solo administradores)
      description: Crea un nuevo usuario en el sistema. **Este endpoint es solo para uso administrativo. Los usuarios normales deben registrarse a través de `/api/sessions/register`.**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Juan"
                lastName:
                  type: string
                  example: "Ejemplo"
                dni:
                  type: integer
                  example: 33456123
                blockAndLot:
                  type: string
                  example: "3401"
                phone:
                  type: integer
                  example: 3515451278
                email:
                  type: string
                  example: "juanejemplo@gmail.com"
                password:
                  type: string
                  example: "Password78910"
              required:
                - name
                - lastName
                - dni
                - blockAndLot
                - phone
                - email
                - password
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  response:
                    type: string
                    example: "66d0c65aa57a12a9acda70a1"
                  message:
                    type: string
                    example: "User created successfully!"
        '403':
          description: Prohibido - Solo administradores
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: "Forbidden. Insufficient permissions"
        '401':
          description: Autenticación fallida
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Bad auth from policies!"
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Internal Server Error"

  /api/users/{uid}:
    get:
      tags:
        - Users
      summary: Obtener usuario por ID
      description: Obtiene la información de un usuario específico utilizando su ID.
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
            example: "66c4b893c5fc601d015fa00a"
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  response:
                    $ref: '#/components/schemas/User'
                example:
                  statusCode: 200
                  response:
                    _id: "66c4b893c5fc601d015fa00a"
                    name: "Juan Manuel"
                    lastName: "Cámara"
                    dni: 33162314
                    blockAndLot: "3401"
                    phone: 3515921209
                    email: "juanconizza@gmail.com"
                    password: "$2b$10$O8jnI7F74Dm.XLlDdLaDl.HaVgzkcRp0FgTK8yvy0nLdn/I2M9sk6"
                    role: 1
                    verify: true
                    verifyCode: "158535"
                    createdAt: "2024-08-20T15:38:59.260Z"
                    updatedAt: "2024-08-20T15:39:25.001Z"
                    __v: 0
        '401':
          description: Error de autenticación
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Bad auth from policies!"
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  response:
                    type: null
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Internal Server Error"

    /api/users/{uid}:
    put:
      tags:
        - Users
      summary: Actualizar usuario
      description: Actualiza la información de un usuario específico utilizando su ID. En el ejemplo modificamos el DNI. 
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
            example: "66c4b893c5fc601d015fa00a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              name: "Juan Manuel"
              lastName: "Cámara"
              dni: 33456123
              blockAndLot: "3401"
              phone: 3515921209
              email: "juanconizza@gmail.com"
              password: "$2b$10$O8jnI7F74Dm.XLlDdLaDl.HaVgzkcRp0FgTK8yvy0nLdn/I2M9sk6"
              role: 1
              verify: true
              verifyCode: "158535"
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  response:
                    $ref: '#/components/schemas/User'
                example:
                  statusCode: 200
                  response:
                    _id: "66c4b893c5fc601d015fa00a"
                    name: "Juan Manuel"
                    lastName: "Cámara"
                    dni: 33162314
                    blockAndLot: "3401"
                    phone: 3515921209
                    email: "juanconizza@gmail.com"
                    password: "$2b$10$O8jnI7F74Dm.XLlDdLaDl.HaVgzkcRp0FgTK8yvy0nLdn/I2M9sk6"
                    role: 1
                    verify: true
                    verifyCode: "158535"
                    createdAt: "2024-08-20T15:38:59.260Z"
                    updatedAt: "2024-08-20T15:39:25.001Z"
                    __v: 0
        '401':
          description: Error de autenticación
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Bad auth from policies!"
        '403':
          description: Permisos insuficientes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden. Insufficient permissions"
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  error:
                    type: string
                    example: "User with ID 66c4b893c5fc601d015fa00c not found."
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Internal Server Error"

    delete:
      tags:
        - Users
      summary: Eliminar usuario
      description: Elimina un usuario específico utilizando su ID. En este caso eliminamos el creado en el endpoint `api/sessions/register`.
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
            example: "66d09c0144216abf2b27f0d5"
      responses:
        '200':
          description: Usuario eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  response:
                    $ref: '#/components/schemas/User'
                example:
                  statusCode: 200
                  response:
                    _id: "66d09c0144216abf2b27f0d5"
                    name: "Maria"
                    lastName: "Garcia"
                    dni: 16234566
                    blockAndLot: "3402"
                    phone: 3516953315
                    email: "mariagarcia33@gmail.com"
                    password: "$2b$10$Qzzw12xfFdLmoaxKY3y0z.c9giVWFcik3VYAFRWJE7.MJikSJTyKG"
                    role: 0
                    verify: false
                    verifyCode: "200262"
                    createdAt: "2024-08-29T16:04:17.915Z"
                    updatedAt: "2024-08-29T16:04:17.915Z"
                    __v: 0
        '401':
          description: Error de autenticación
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Bad auth from policies!"
        '403':
          description: Permisos insuficientes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Forbidden. Insufficient permissions"
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404                  
                  message:
                    type: string
                    example: "User with ID 66d09c0144216abf2b27f0d5 not found."
        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Internal Server Error"