<div class="container mt-3">
  <h2 class="text-center mb-4">Carrito de Compras</h2>
  {{#if cartInfo}}
    <div class="row">
      {{#each cartInfo}}
        <div class="col-md-6 mb-2">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">{{product_id.title}}</h5>
              <p class="card-text">Precio: ${{product_id.price}}</p>
              <label for="quantity">Cantidad:</label>
              <input type="number" id="quantity" name="quantity" min="1" value="{{this.quantity}}" onchange="updateQuantity('{{this._id}}', this.value)">
              <button class="btn btn-danger" onclick="removeFromCart('{{this._id}}')">Eliminar</button>
            </div>
          </div>
        </div>
      {{/each}}
    </div>
    <div class="row mb-3 mt-3">
  <div class="col-md-6">
    <p class="fs-3">Total de compra: $<span id="totalAmount"></span></p>
  </div>
</div>
    <div class="row mt-4 mb-2">
      <div class="col-md-6 mb-5">
        <button class="btn btn-success" onclick="checkout()">Comprar</button>
        <button class="btn btn-secondary" onclick="clearCart()">Vaciar Carrito</button>
      </div>
    </div>    
  {{else}}
    <div class="alert alert-info" role="alert">
      No hay productos en el carrito.
    </div>
  {{/if}}
</div>


<script>

document.addEventListener("DOMContentLoaded", async () => {
    try {
      const response = await fetch('/api/tickets');
      if (response.ok) {
        const data = await response.json();
        document.getElementById('totalAmount').innerText = data.totalCart;
      } else {
        console.error('Error al obtener el total del carrito:', response.statusText);
      }
    } catch (error) {
      console.error('Error al obtener el total del carrito:', error.message);
    }
  });

  // Función para eliminar un producto del carrito y recargar la página
  async function removeFromCart(cartItemId) {
    try {
      // Realizar una solicitud DELETE al endpoint correspondiente
      const response = await fetch(`/api/cart-contact/${cartItemId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        // Si la solicitud se realizó con éxito, recargar la página
        location.reload();
      } else {
        // Si hubo un error en la solicitud, mostrar un mensaje de error
        console.error('Error al eliminar el producto del carrito:', response.statusText);
      }
    } catch (error) {
      console.error('Error al eliminar el producto del carrito:', error.message);
    }
  }

  // Función para procesar el pago y contactar al vendedor
 
  async function checkout() { 
  
  try {
    // Obtener el total de la compra
    const totalAmount = document.getElementById('totalAmount').innerText;
    const cartInfo = {{{json cartInfo}}}; // Convertir cartInfo a un objeto JavaScript
    
    // Agrupar los productos por vendedor
    const groupedBySeller = cartInfo.reduce((acc, item) => {
      const sellerId = item.seller_id._id;
      if (!acc[sellerId]) {
        acc[sellerId] = {
          seller_id: item.seller_id._id,
          products: [],
        };
      }
      acc[sellerId].products.push({
        product_id: item.product_id._id,
        quantity: item.quantity,
      });
      return acc;
    }, {});

    // Convertir el objeto agrupado en un array de vendedores
    const sellers = Object.values(groupedBySeller);

    console.log(sellers)

    // Estructurar los datos para la solicitud POST
    const purchaseData = {
      buyer_id: cartInfo[0].buyer_id._id,  
      sellers: sellers,
      total_purchase: parseFloat(totalAmount),
      state: 'success', 
    };   


    // Enviar la solicitud POST al endpoint /api/purchase
    const response = await fetch('/api/purchase', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(purchaseData),
    });

    if (response.ok) {
      // Redirigir o mostrar un mensaje de éxito
      console.log('Compra realizada con éxito');
      // Puedes redirigir a una página de éxito, por ejemplo:
      // window.location.href = '/success';
      clearCart();
    } else {
      console.error('Error al procesar la compra:', response.statusText);
    }
  } catch (error) {
    console.error('Error al procesar la compra:', error.message);
  }
}

  // Función para cancelar la compra y vaciar el carrito
      async function clearCart() {
    try {
      const response = await fetch('/api/cart-contact/all', {
        method: 'DELETE'
      });

      responseData = response.json()

      console.log(responseData)

      if (response.ok) {
        // Si la solicitud se realizó con éxito, recargar la página o realizar otra acción
        location.reload(); // Recargar la página para reflejar los cambios
      } else {
        console.error('Error al vaciar el carrito:', response.statusText);
        // Mostrar un mensaje de error al usuario, si es necesario
      }
    } catch (error) {
      console.error('Error al vaciar el carrito:', error.message);
      // Manejar errores de red u otros errores
    }
  }

  // Función para actualizar la cantidad de un producto en el carrito
let timeout = null; // Variable para almacenar el temporizador

async function updateQuantity(cartItemId, newQuantity) {
  try {
    // Realizar una solicitud PUT al endpoint para actualizar la cantidad
    const response = await fetch(`/api/cart-contact/${cartItemId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ quantity: newQuantity })
    });

    if (response.ok) {
      // Si la solicitud se realizó con éxito, actualizar el total después de 2 segundos
      clearTimeout(timeout); // Limpiar temporizador anterior si existe
      timeout = setTimeout(() => {
        updateTotal(); // Llamar a la función para actualizar el total del carrito
      }, 500); // Esperar 2 segundos antes de actualizar el total
    } else {
      console.error('Error al actualizar la cantidad del producto:', response.statusText);
    }
  } catch (error) {
    console.error('Error al actualizar la cantidad del producto:', error.message);
  }
}

// Función para actualizar el total del carrito
async function updateTotal() {
  try {
    const response = await fetch('/api/tickets');
    if (response.ok) {
      const data = await response.json();
      document.getElementById('totalAmount').innerText = data.totalCart;
    } else {
      console.error('Error al obtener el total del carrito:', response.statusText);
    }
  } catch (error) {
    console.error('Error al obtener el total del carrito:', error.message);
  }
}

  
</script>
